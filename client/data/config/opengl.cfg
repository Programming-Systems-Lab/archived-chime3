;-------------------------------------------
; OpenGL specific stuff
;-------------------------------------------
Video.OpenGL =

; Enable Dither mode.
Video.OpenGL.EnableDither = yes

; Enable Bilinear texture mapping (slower, especially
; if you don't have hardware acceleration).
Video.OpenGL.EnableBilinearMap = yes

; If this is set to 'yes' then you don't care about good perspective
; correction. This may mean that textures are rendered faster.
; Wether or not this hint is honored depends on the implementation.
Video.OpenGL.HintPerspectiveFast = no

; This tells how to blend lightmaps with their underlying textures.
; Legal modes are 'multiplydouble', 'multiply' (the default), 'coloradd',
; 'add', and 'auto'. Choose to fit your hardware and taste.  The 'multiply' mode
; is supported on most hardware but is often too dark.  If your hardware
; supports it, 'multiplydouble' often gives a better scene.
Video.OpenGL.LightmapMode = multiplydouble

; If this option is enabled, the OpenGL renderer will use an extra
; flag to further brighten textures. This is especially useful in
; combination with LightmapMode=multiply as this simulates the
; desired 2*SRC*DST mode on cards that don't directly support
; 2*SRC*DST (i.e. multiplydouble). Of course this slows down
; the renderer (until we use multi-texturing).
Video.OpenGL.ExtraBright = no

; Uncomment one of the following to choose procedural texture implementation.

; Utilise a 32bit software renderer to write the procedural textures, in some 
; circumstances this is faster than the back buffer version, because the 
; glCopyTexImage is unoptimised/very slow with some opengl implementations
Video.OpenGL.ProceduralTexture = software

; Currently this is the 'hardware accelerated version'
; For the most part it just beats the software renderer with my voodoo2, the
; improvement is more marked though on cards with better implementation of 
; glCopyTexImage.
;Video.OpenGL.ProceduralTexture = back_buffer

; Not yet available
;Video.OpenGL.ProceduralTexture = auxiliary_buffer

Video.OpenGL.BlendMipmap = no

;Video.OpenGL.Canvas = crystalspace.graphics2d.glx
;Video.OpenGL.Canvas = crystalspace.graphics2d.glwin32
;Video.OpenGL.Canvas = crystalspace.graphics2d.glos2
;Video.OpenGL.Canvas = crystalspace.graphics2d.glmac
;Video.OpenGL.Canvas = crystalspace.graphics2d.glbe
;Video.OpenGL.Driver = crystalspace.graphics2d.glx.disp.glide
